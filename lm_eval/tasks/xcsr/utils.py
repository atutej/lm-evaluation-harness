import argparse
from typing import Dict, List

import yaml


# Different languages that are part of xnli.
# These correspond to dataset names (Subsets) on HuggingFace.
# A yaml file is generated by this script for each language.

from datasets import get_dataset_config_names
LANGUAGES = get_dataset_config_names("xcsr")

'''
def doc_to_text(doc):
    d = doc["question"]
    question = d["stem"]
    d = d["choices"]
    mc_answer1 = d["text"][0]
    mc_answer2 = d["text"][1]
    mc_answer3 = d["text"][2]
    mc_answer4 = d["text"][3]
    mc_answer5 = d["text"][4]

    prompt_template = f"""Question: {question}
    Answer A: {mc_answer1}
    Answer B: {mc_answer2}
    Answer C: {mc_answer3}
    Answer D: {mc_answer4}
    Answer E: {mc_answer5}
    Correct answer: """

    return prompt_template
'''

def doc_to_text_csqa(doc):
    prompt = "Question: " + doc["question"]["stem"] + "\tAnswer: "
    return prompt

def doc_to_choice_csqa(doc):
    return doc["question"]["choices"]["text"]

def doc_to_target_csqa(doc):
    dict_ = {"A": 0, "B": 1, "C": 2, "D": 3, "E": 4}
    return dict_[doc["answerKey"]]

def doc_to_text_codah(doc):
    return ""

def doc_to_choice_codah(doc):
    #print(doc)
    return doc["question"]["choices"]["text"]

def doc_to_target_codah(doc):
    dict_ = {"A": 0, "B": 1, "C": 2, "D": 3}
    return dict_[doc["answerKey"]]

def gen_lang_yamls(output_dir: str, overwrite: bool) -> None:
    """
    Generate a yaml file for each language.

    :param output_dir: The directory to output the files to.
    :param overwrite: Whether to overwrite files if they already exist.
    """
    err = []
    for lang in LANGUAGES:
        file_name = f"xcsr_{lang}.yaml"
        try:
            with open(
                f"{output_dir}/{file_name}", "w" if overwrite else "x", encoding="utf8"
            ) as f:
                f.write("# Generated by utils.py\n")
                yaml.dump(
                    {
                        "include": "xcsqa_common_yaml" if "CSQA" in lang else "xcodah_common_yaml",
                        "dataset_name": lang,
                        "task": f"xcsr_{lang}",
                    },
                    f,
                    allow_unicode=True,
                )
        except FileExistsError:
            err.append(file_name)

    if len(err) > 0:
        raise FileExistsError(
            "Files were not created because they already exist (use --overwrite flag):"
            f" {', '.join(err)}"
        )


def main() -> None:
    """Parse CLI args and generate language-specific yaml files."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--overwrite",
        default=False,
        action="store_true",
        help="Overwrite files if they already exist",
    )
    parser.add_argument(
        "--output-dir", default=".", help="Directory to write yaml files to"
    )
    args = parser.parse_args()

    gen_lang_yamls(output_dir=args.output_dir, overwrite=args.overwrite)


if __name__ == "__main__":
    main()